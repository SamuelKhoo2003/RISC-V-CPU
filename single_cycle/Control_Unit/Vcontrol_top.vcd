$version Generated by VerilatedVcd $end
$date Sat Dec  2 23:00:33 2023 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  3 ) ALUctrl_o [2:0] $end
  $var wire  1 * ALUsrc_o $end
  $var wire 32 , ImmOp_o [31:0] $end
  $var wire  1 ' MemWrite_o $end
  $var wire  8 # PC_i [7:0] $end
  $var wire  2 + PCsrc_o [1:0] $end
  $var wire  1 & RegWrite_o $end
  $var wire  2 ( Resultsrc_o [1:0] $end
  $var wire  1 $ Zero_i $end
  $var wire 32 % instr_o [31:0] $end
  $scope module control_top $end
   $var wire 32 4 ADDRESS_WIDTH [31:0] $end
   $var wire  3 ) ALUctrl_o [2:0] $end
   $var wire  1 * ALUsrc_o $end
   $var wire 32 6 CONTROL_WIDTH [31:0] $end
   $var wire 32 5 DATA_WIDTH [31:0] $end
   $var wire 32 7 IMM_WIDTH [31:0] $end
   $var wire 32 , ImmOp_o [31:0] $end
   $var wire  2 - ImmSrc [1:0] $end
   $var wire  1 ' MemWrite_o $end
   $var wire  8 # PC_i [7:0] $end
   $var wire  2 + PCsrc_o [1:0] $end
   $var wire  1 & RegWrite_o $end
   $var wire  2 ( Resultsrc_o [1:0] $end
   $var wire  1 $ Zero_i $end
   $var wire 32 % instr_o [31:0] $end
   $scope module ControlUnit $end
    $var wire  3 ) ALUctrl_o [2:0] $end
    $var wire  1 * ALUsrc_o $end
    $var wire 32 6 CONTROL_WIDTH [31:0] $end
    $var wire 32 5 DATA_WIDTH [31:0] $end
    $var wire 32 7 IMM_WIDTH [31:0] $end
    $var wire  2 - ImmSrc_o [1:0] $end
    $var wire  1 ' MemWrite_o $end
    $var wire  2 + PCsrc_o [1:0] $end
    $var wire  1 & RegWrite_o $end
    $var wire  2 ( Resultsrc_o [1:0] $end
    $var wire  1 $ Zero_i $end
    $var wire  3 / funct3 [2:0] $end
    $var wire 32 % instr_i [31:0] $end
    $var wire  7 . opcode [6:0] $end
   $upscope $end
   $scope module InstrMem $end
    $var wire 32 4 ADDRESS_WIDTH [31:0] $end
    $var wire 32 5 DATA_WIDTH [31:0] $end
    $var wire 32 % Instr_o [31:0] $end
    $var wire  8 # addr_i [7:0] $end
    $var wire  8 0 rom_array0 [7:0] $end
    $var wire  8 1 rom_array1 [7:0] $end
    $var wire  8 2 rom_array2 [7:0] $end
    $var wire  8 3 rom_array3 [7:0] $end
   $upscope $end
   $scope module MySignExtend $end
    $var wire 32 5 DATA_WIDTH [31:0] $end
    $var wire 32 7 IMM_WIDTH [31:0] $end
    $var wire 32 , ImmOp_o [31:0] $end
    $var wire  2 - ImmSrc_i [1:0] $end
    $var wire 32 % instr_i [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000 #
0$
b00000000000000000000000000000000 %
0&
0'
b00 (
b000 )
0*
b00 +
b00000000000000000000000000000000 ,
b00 -
b0000000 .
b000 /
b00000000 0
b00000000 1
b00000000 2
b00000000 3
b00000000000000000000000000001000 4
b00000000000000000000000000100000 5
b00000000000000000000000000000011 6
b00000000000000000000000000000010 7
#2
b00001111111100000000001100010011 %
1&
1*
b00000000000000000000000011111111 ,
b01 -
b0010011 .
b00010011 0
b00000011 1
b11110000 2
b00001111 3
#4
b00000100 #
b00000101 1
b00000000 2
b00000000 3
#6
b00001000 #
b00000000000000000000010100010011 %
b00000000000000000000000000000000 ,
b10010011 0
#8
b00001100 #
b00000000000000000000010110010011 %
b00010011 0
b10000101 1
b00000101 2
#10
b00010000 #
b00000000000001011000010100010011 %
b10010011 0
b00010101 2
#12
b00010100 #
b00000000000101011000010110010011 %
b00000000000000000000000000000001 ,
b11100011 0
b10011100 1
b01100101 2
b11111110 3
#14
b00011000 #
b11111110011001011001110011100011 %
0&
b01 (
0*
b01 +
b11111111111111111111111111111000 ,
b11 -
b1100011 .
b001 /
b00011000 1
b00000011 2
#16
b00011100 #
b11111110000000110001100011100011 %
b11111111111111111111111111110000 ,
b00000000 0
b00000000 1
b00000000 2
b00000000 3
#18
b00100000 #
b00000000000000000000000000000000 %
1&
b00 (
1*
b00 +
b00000000000000000000000000000000 ,
b00 -
b0000000 .
b000 /
