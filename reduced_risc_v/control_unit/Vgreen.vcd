$version Generated by VerilatedVcd $end
$date Fri Dec  1 15:01:54 2023 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  3 ' ALUctrl [2:0] $end
  $var wire  1 ( ALUsrc $end
  $var wire  1 $ EQ $end
  $var wire 32 * ImmOp [31:0] $end
  $var wire  8 # PC [7:0] $end
  $var wire  1 ) PCsrc $end
  $var wire  1 & RegWrite $end
  $var wire 32 % instr [31:0] $end
  $scope module green $end
   $var wire 32 - ADDRESS_WIDTH [31:0] $end
   $var wire  3 ' ALUctrl [2:0] $end
   $var wire  1 ( ALUsrc $end
   $var wire 32 . DATA_WIDTH [31:0] $end
   $var wire  1 $ EQ $end
   $var wire 32 * ImmOp [31:0] $end
   $var wire  2 + ImmSrc [1:0] $end
   $var wire  8 # PC [7:0] $end
   $var wire  1 ) PCsrc $end
   $var wire  1 & RegWrite $end
   $var wire 32 % instr [31:0] $end
   $scope module MyControlUnit $end
    $var wire  3 ' ALUctrl [2:0] $end
    $var wire  1 ( ALUsrc $end
    $var wire 32 . DATA_WIDTH [31:0] $end
    $var wire  1 $ EQ $end
    $var wire  2 + ImmSrc [1:0] $end
    $var wire  1 ) PCsrc $end
    $var wire  1 & RegWrite $end
    $var wire 32 % instr [31:0] $end
    $var wire  7 , opcode [6:0] $end
   $upscope $end
   $scope module MyInstrMem $end
    $var wire 32 - ADDRESS_WIDTH [31:0] $end
    $var wire 32 - DATA_WIDTH [31:0] $end
    $var wire  8 # addr [7:0] $end
    $var wire  1 / clk $end
    $var wire 32 % dout [31:0] $end
   $upscope $end
   $scope module MySignExtend $end
    $var wire 32 . DATA_WIDTH [31:0] $end
    $var wire 32 * ImmOp [31:0] $end
    $var wire  2 + ImmSrc [1:0] $end
    $var wire 32 % instr [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000 #
0$
b00000000000000000000000000000000 %
0&
b000 '
0(
0)
b00000000000000000000000000000000 *
b00 +
b0000000 ,
b00000000000000000000000000001000 -
b00000000000000000000000000100000 .
0/
#2
b00001111111100000000001100010011 %
1&
1(
b00000000000000000000000011111111 *
b01 +
b0010011 ,
#4
b00000100 #
#6
b00001000 #
b00000000000000000000010100010011 %
b00000000000000000000000000000000 *
#8
b00001100 #
b00000000000000000000010110010011 %
#10
b00010000 #
b00000000000001011000010100010011 %
#12
b00010100 #
b00000000000101011000010110010011 %
b00000000000000000000000000000001 *
#14
b00011000 #
b11111110011001011001110011100011 %
0&
0(
b11111111111111111111111111111000 *
b11 +
b1100011 ,
#16
b00011100 #
b11111110000000110001100011100011 %
b11111111111111111111111111110000 *
#18
b00100000 #
b00000000000000000000000000000000 %
1&
1(
b00000000000000000000000000000000 *
b00 +
b0000000 ,
